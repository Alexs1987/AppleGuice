{"name":"Appleguice","tagline":"Effortless dependency injection framework for Objective-C","body":"AppleGuice\r\n==========\r\n\r\nEffortless dependency injection framework for Objective-C\r\n\r\n[![Build Status](https://travis-ci.org/tomersh/AppleGuice.png?branch=master)](https://travis-ci.org/tomersh/AppleGuice)\r\n\r\n## What AppleGuice does for you? ##\r\n\r\nAppleGuice helps you write clean, reuseable and testable code by allowing you to easily inject your services to any class.\r\nOther dependency injection frameworks require binding, xml editing or initializing your classes with a special method.\r\nWith AppleGuice all you have to do is declare the injected type and thats it. As a bonus, you will still be able to initialize classes with `[[MyClass alloc] init]` so it is even easier to integrate it with your existing code base.\r\n\r\n## Show Me ##\r\n\r\n### Inject your first injectable instance with 3 simple steps: ###\r\n\r\n#### Start AppleGuice ####\r\n```objectivec\r\n\r\n//AppDelegate.m\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n//Some code\r\n\r\n[AppleGuice startService];\r\n\r\n//More Code\r\n}\r\n```\r\n#### Create your injectable service ####\r\nMark your injectable service with the protocol `AppleGuiceInjectable` so AppleGuice will find it.\r\n```objectivec\r\n\r\n@protocol MyServiceProtocol <AppleGuiceInjectable>\r\n\r\n-(void) doStuff;\r\n\r\n@end\r\n\r\n@interface MyService : NSObject<MyServiceProtocol>\r\n@end\r\n\r\n@implementation MyService\r\n...\r\n@end\r\n```\r\n\r\n#### Enjoy automatic injection while coding ####\r\nCreate an ivar prefixed with the ioc prefix (the default is `_ioc_`).\r\nAppleGuice will automatically inject the proper implementation when calling the init method.\r\n```objectivec\r\n//MyClass.h\r\n@interface MyClass : NSObject\r\n\r\n@property (nonatomic, strong) id<MyServiceProtocol> ioc_myService;\r\n\r\n@end\r\n\r\n//MyClass.m\r\n@implementation MyClass\r\n\r\n//Now, you can use _ioc_myService anywhere. Even in the init function!\r\n\r\n-(id) init {\r\n  self = [super init];\r\n  [self.ioc_myService doStuff];\r\n  return self;\r\n}\r\n@end\r\n```\r\nAppleGuice initialized `_ioc_myService`  without any manual binding!\r\n\r\n#### Stub with ease while testing ####\r\n```objectivec\r\n#import <AppleGuice/AppleGuice.h>\r\n\r\n@implementation MyClassTests {\r\n    MyClass* classUnderTest;\r\n}\r\n\r\n-(void)setUp\r\n{\r\n    [super setUp];\r\n    [AppleGuice startService];\r\n    [AppleGuice setInstanceCreationPolicy:AppleGuiceInstanceCreationPolicyCreateMocks];\r\n    classUnderTest = [[MyClass alloc] init];\r\n}\r\n\r\n-(void) test_foo_returnsValue {\r\n  //the injectable ivar is initialized with a mock. You can stub methods on it as you normally do with OCMock.\r\n  [[[classUnderTest.ioc_myService expect] andReturn:@\"someString\"] doStuff:OCMOCK_ANY];\r\n  \r\n  [classUnderTest foo];\r\n  \r\n  [classUnderTest.ioc_myService verify];\r\n}\r\n```\r\n*When testing, AppleGuice works best with [OCMock](http://ocmock.org/).\r\n\r\n## Inject In every flavour ##\r\nInjecting a service is done by declering an ivar in a class. You can add it in the interface, implementation, as a property or even inside a private category. AppleGuice will find it.\r\nInjection comes in three flavours:\r\n```objectivec\r\n@interface MyClass () {\r\n    MyService* _ioc_MyService; //will create an instance of MyService.\r\n    id<MyServiceProtocol> _ioc_MyService //will create an instance of the first class conforming to MyProtocol.\r\n    NSArray* _ioc_MyProtocol //will return an array containing instances of all classes conforming to MyProtocol\r\n}\r\n```\r\n\r\n## More features ##\r\n\r\n### Singletons in a snap ###\r\nInstead of messing your code with shared instance declerations or macros, you can just add `AppleGuiceSingleton` to the implemented protocols list and AppleGuice will always return the same instance.\r\n```objectivec\r\n@protocol MyServiceProtocol <AppleGuiceInjectable, AppleGuiceSingleton>\r\n@end\r\n```\r\n\r\n### Circular dependency support ###\r\nAppleGuice can handle circular depenency between injected classes as long as the dependent classes conforms to `AppleGuiceSingleton`.\r\n\r\n### LazyLoad objects ###\r\nYou can configure AppleGuice to inject a proxy object instead of the real service. Once the service is needed (A method in the service is called) the proxy will be replaced with the real object.\r\n```objectivec\r\n//add in your AppDelegate\r\n[AppleGuice setInstanceCreationPolicy:AppleGuiceInstanceCreationPolicyLazyLoad];\r\n```\r\n\r\n## Ready to start? ##\r\nCheck out the quick [installation guide](https://github.com/tomersh/AppleGuice/wiki/AppleGuice-Installation-Guide).\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/e73586a87135304cb47ff18e519b75f6 \"githalytics.com\")](http://githalytics.com/tomersh/AppleGuice)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}